/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* REXX: CICSCMND      Proc Created 10/18/2006       By Dave Clark */
/*                     Last Revised 01/01/2012                     */
/*                                                                 */
/*      This procedure uses the three-step CICS console communica- */
/* tion process, required for CICS/VSE 2.3 (but is also compatible */
/* with CICS/TS),  to issue a  specified  CEMT command string to a */
/* specified CICS partition.                                       */
/*                                                                 */
/* // EXEC REXX=CICSCMND,PARM='...'                                */
/*                                                                 */
/* Parms: <CICS=>jobname                                           */
/*        <CMND=>command string                                    */
/* Notes:                                                          */
/* 1) Must be delimited by either commas, spaces, or both.         */
/* 2) The order is positional -- unless keyword tags specified.    */
/* 3) You cannot omit a positional argument and position the next. */
/*                                                                 */
/* Where: < > encloses identifiers or values which are optional;   */
/*        CICS=     is an optional keyword tag and                 */
/*        jobname   is the POWER Job Name for the target CICS;     */
/*        CMND=     is an optional keyword tag and                 */
/*        command string is really any transaction (with / without */
/*                    data) which can  be  executed  from the CICS */
/*                    CNSL (however,  this  procedure  is intended */
/*                    only for use with the CEMT command).         */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* No warranty is expressed or implied.    Written by Dave L Clark */
/* Neither the author nor the company is   WinWholesale Group Svcs */
/* responsible for any loss or damage      3110 Kettering Blvd.    */
/* resulting from the use of this code.    Dayton, OH  45439       */
/* Source is provided on an as-is basis.   Phone (937)294-5331     */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Example job:                                                    */
/*                                                                 */
/* // JOB    CLOSE AND REOPEN A CICS FILE                          */
/* // EXEC   REXX=CICSCMND,                                        */
/*                PARM='CICSTEST,CEMT SET FI(SBFDATA) CLO'         */
/* // PAUSE  THIS APPEARS AFTER THE LAST CICS RESPONSE IS COMPLETE */
/* // EXEC   REXX=CICSCMND,                                        */
/*                PARM='CICSTEST,CEMT SET FI(SBFDATA) OPE'         */
/* /& EOJ                                                          */
/*                                                                 */
/* Note: Include a dash after the CEMT transaction code to force   */
/*       the condensed version of the CEMT output.  Example:       */
/*                                                                 */
/* // JOB    CLOSE AND REOPEN A CICS FILE                          */
/* // EXEC   REXX=CICSCMND,                                        */
/*                PARM='CICSTEST,CEMT-SET FI(SBFDATA) CLO'         */
/* // PAUSE  THIS APPEARS AFTER THE LAST CICS RESPONSE IS COMPLETE */
/* // EXEC   REXX=CICSCMND,                                        */
/*                PARM='CICSTEST,CEMT-SET FI(SBFDATA) OPE'         */
/* /& EOJ                                                          */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  Parse Source sys env pgm tokens;

  False = (0=1);
  True  = (1=1);

  rc = 0;
  Arg msg;

/* ----------------------------------------------------------------- */
/* Validate PARM arguments                                           */
/* ----------------------------------------------------------------- */

  If msg <> '' & msg <> '?' Then Do
    Parse Value Space(Translate(msg,' ',',')) With ,
      cics cmnd 1 'CICS=' cics2 . ,
                1 'DAYS=' cmnd2;
    If cics2 <> '' Then cics = cics2;  /* if keyword used,... */
    If cmnd2 <> '' Then cmnd = cmnd2;  /* if keyword used,... */
    If Kword(cics) Then cics = '';     /* positional omitted? */
    If Kword(cmnd) Then cmnd = '';     /* positional omitted? */
    If cics == '' | cmnd == '' Then Do
      Say ' Missing argument(s):';
      Say '  CICS='cics',CMND="'cmnd'"';
      msg = '';
      rc = 4;
    End
  End

  If msg == '' | msg == '?' Then Do
    Do n = 1 While Left(Sourceline(n),2) = '/*'
      Say ' 'Sourceline(n);
    End
    Exit rc;
  End

  Call SayAll pgm": Using CICS="cics",CMND='"cmnd"'";
  Say ' ';

/* ----------------------------------------------------------------- */
/* Initialize REXX Console variables                                 */
/* ----------------------------------------------------------------- */

  x = SYSVAR('SYSPOWJNM');       /* get POWER job name               */
  cnsl  = SYSPOWJNM;             /* name for your console interface  */
  cart  = '';                    /* CART is for GET-RESP not GET-MSG */
  mask  = 'FFFFFFFFFFFF0000'X;   /* compare CARTs on first 6 bytes   */

/* ----------------------------------------------------------------- */
/* Talk to CICS partition                                            */
/* ----------------------------------------------------------------- */

  replid = '';
  z      = OPERMSG('ON');         /* allow for OC interrupt */

  Call RexxConsole cart, 'INIT', 'REXALLRC';     /* all console msgs */

  Call RexxConsole cart, 'PUT', 'MSG' cics;           /* step 1 */
  Do Forever
    Call RexxConsole cart, 'GET', 'MSG';
    If msgs.0 = 0 Then
      Leave;
    Else Do
      Say msgs.1;
      If mdbgjbnm = cics,
      &  SubStr(msgs.1,3,1) = "-" Then Do
        replid = SubStr(Word(msgs.1,1),4)
        Leave;
      End
    End
    z = OPERMSG('MSGDATA');       /* check for operator message */
    If Length(z) > 0 Then Leave;  /* and, if present, exit      */
  End

  Say ' ';
  findit = 'RESPONSE:';

  resp.  = '';
  resp.0 = 0;

  If replid <> '' Then Do
    Call RexxConsole cart, 'PUT', replid cmnd;        /* step 2 */
    ready1 = False;
    ready2 = False;
    Do Forever
      Call RexxConsole cart, 'GET', 'MSG';
      If msgs.0 = 0 Then
        Leave;
      Else Do
        Do x = 1 To msgs.0
          Say msgs.x;
          If mdbgjbnm = cics Then Do
            If SubStr(msgs.x,3,1) = "-" Then ready1 = True;
            If WordPos(findit,msgs.x) > 0 Then ready2 = True;
            n = resp.0 + 1;
            resp.n = msgs.x;
            resp.0 = n;
          End
        End
        If ready1 & ready2 Then Leave;
      End
      z = OPERMSG('MSGDATA');       /* check for operator message */
      If Length(z) > 0 Then Leave;  /* and, if present, exit      */
    End
    Call RexxConsole cart, 'PUT', replid;             /* step 3 */
  End

  Call RexxConsole cart, 'TERM';

  z      = OPERMSG('OFF');        /* terminate OC interface */

/* ----------------------------------------------------------------- */
/* Examine CEMT Response                                             */
/* ----------------------------------------------------------------- */

  Say ' ';

  If resp.0 > 0 Then Do
    rspns  = '';
    Do i = 1 To resp.0
      If WordPos(findit,resp.i) > 0 Then Do
        Parse Var resp.i . (findit) rspns;
        Leave;
      End
    End
    If rspns <> '' Then Do
      If Word(rspns,1) == 'NORMAL' Then
        rspns = Word(rspns,1);
      Else Do
        rspns = Word(rspns,1) Word(rspns,2);
      End
      Call SayAll pgm': Response = 'rspns;
      If rspns <> 'NORMAL' Then
        rc = 8;
      Else Do
        rc = 0;
      End
    End
  End
  Else Do
    Call SayAll pgm': Unable to detect CICS Reply Id.';
    rc = 8;
  End

/* ----------------------------------------------------------------- */
/* Exit procedure                                                    */
/* ----------------------------------------------------------------- */

Exit rc;

/* ----------------------------------------------------------------- */
/* Internal Functions and Routines                                   */
/* ----------------------------------------------------------------- */

Kword: Procedure Expose True False;
  Parse Arg v;
  If Pos('=',v) > 0 Then
    Return True;
Return False;

RexxConsole: Procedure Expose pgm cnsl mask msgs.,
                              mdbcpnum  mdbcret  mdbgdom   mdbghold,
                              mdbgjbnm  mdbgmid  mdbgdstp  mdbgtime,
                              mdbcpnum. mdbcret. mdbgdom.  mdbghold.,
                              mdbgjbnm. mdbgmid. mdbgdstp. mdbgtime.;
  Arg cart, action, data;

  Select

  When action = 'INIT' Then
    Do
      Address CONSOLE "ACTIVATE NAME" cnsl "PROFILE" data;
      If rc <> 0 Then Do
        Say pgm': Error activating "'cnsl'" console; rc =' rc;
        Exit 4;
      End
      If cart <> '' Then Do
        Address CONSOLE "CART" cart;
        If rc <> 0 Then Do
          Say pgm': Error setting "'cart'" CART; rc =' rc;
          Exit 4;
        End
      End
    End

  When action = 'PUT'  Then
    Do
      Address CONSOLE data;
      If rc <> 0 Then Do
        Say pgm': Error issuing "'data'" command; rc =' rc;
        Exit 4;
      End
    End

  When action = 'GET'  Then
    Do
      msgs. = '';
      msgs.0 = 0;
      If cart = '' Then
        rc = GETMSG('msgs.',data,,,30);
      Else Do
        rc = GETMSG('msgs.',data,cart,mask,30);
      End
      If rc <> 0 & rc <> 4 & rc <> 5 Then Do
        Say pgm': Error retrieving "'data'" response; rc =' rc;
        Exit 4;
      End
    End

  Otherwise
    Do
      Address CONSOLE "DEACTIVATE" cnsl;
      If rc <> 0 Then Do
        Say pgm': Error deactivating "'cnsl'" console; rc =' rc;
        Exit 4;
      End
    End

  End
Return;

SayAll: Procedure;
  Parse Arg msg;
  oldout = ASSGN('STDOUT','SYSLOG');
  Say msg;
  oldout = ASSGN('STDOUT','SYSLST');
  Say msg;
Return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
