/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* REXX: RXIPTPCH   Proc Created 10/07/2010   By Dave Clark        */
/*                  Last Revised 10/11/2010                        */
/*                                                                 */
/*      This procedure reads  card  input,  performs variable name */
/* resolution,  and transfers the  cards  to  SYSPCH  or  to a VSE */
/* library member for subsequent input to some other program.   If */
/* transferred to a VSE library member, a second invocation may be */
/* used to delete that member.                                     */
/*                                                                 */
/* // EXEC REXX=RXIPTPCH,PARM='...'                                */
/*                                                                 */
/* Arguments are: {<OUTPUT=>{SYSPCH|JOBINFO|member.type}           */
/*                  |DELETE={JOBINFO|member.type} }                */
/*                <SUBLIB=><lib.sublib>                            */
/* Notes:                                                          */
/* 1) Must be delimited by either commas, spaces, or both.         */
/* 2) The order is positional -- unless keyword tags specified.    */
/* 3) You cannot omit a positional argument and position the next. */
/*                                                                 */
/* Where: < >      encloses optional keywords and/or parameters;   */
/*        { }      encloses a set of mutually exclusive options;   */
/*         |       separates mutually exclusive options;           */
/*        OUTPUT=                                                  */
/*        DELETE=  are mutually exclusive arguments specifying     */
/*                   the destination for resolved card input;      */
/*        SYSPCH   requests resolved card input be written as      */
/*                   punch output (this is the default);           */
/*        JOBINFO  specifies a dynamically-determined VSE library  */
/*                   member for resolved card input (whose name is */
/*                   the concatenated jobname.number and returned  */
/*                   in a symbolic variable of this name);         */
/*        member.type                                              */
/*                 specifies a specific VSE library name and type  */
/*                   for resolved card input;                      */
/*        SUBLIB=  is an optional keyword tag;                     */
/*        lib.sublib                                               */
/*                 specifies the VSE library and sub-library name  */
/*                   in which to place the specified member output */
/*                   (if needed, the default is PRD2.CONFIG).      */
/*                                                                 */
/* NOTE: Variable name resolution is via the ReplVars REXX program */
/* and, as such, not just user symbolics are recognized but, also, */
/* internal  variable  names  which  are  unique  to  the ReplVars */
/* procedure.  See that program's comments for more information.   */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* No warranty is expressed or implied.    Written by Dave L Clark */
/* Neither the author nor the company is   WinWholesale Group Svcs */
/* responsible for any loss or damage      3110 Kettering Blvd.    */
/* resulting from the use of this code.    Dayton, OH  45439       */
/* Source is provided on an as-is basis.   Phone (937)294-5331     */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*      Note that this  procedure  is  only  required  in order to */
/* process symbolic variable name resolutions and,  as such, those */
/* symbolic variables must be passed  to this procedure so that it */
/* has access to their values.  For example:                       */
/*                                                                 */
/* * $$ PUN PUN=SYSPCH,DISP=I,CLASS=C                              */
/* // JOB    RXIPTPCH   INVOKE IDCAMS/W VAR SUBSTITUTION           */
/* // EXEC   PGM=IESINSRT,SIZE=*                                   */
/* $ $$ LST LST=SYSLST,DISP=D,CLASS=Z                              */
/* // JOB    INVOKE IDCAMS/W VAR SUBSTITUTION                      */
/* // EXEC   PGM=IDCAMS,SIZE=AUTO                                  */
/* * $$ END                                                        */
/* /* EOD */                                                       */
/* // SETPARM DSN='DAPSCO.COMASTR.FILE'                            */
/* // SETPARM CAT='DAPSCO.DAPA.CATALOG'                            */
/* // EXEC   REXX=RXIPTPCH,DSN,CAT                                 */
/*    LISTCAT ENTRIES(<DSN>) -                                     */
/*            CATALOG(<CAT>) ALL                                   */
/* /* EOD */                                                       */
/* // EXEC   PGM=IESINSRT,SIZE=*                                   */
/* #* EOD                                                          */
/* #& EOJ                                                          */
/* * $$ END                                                        */
/* /* EOD */                                                       */
/* /& EOJ                                                          */
/*                                                                 */
/* Also note that the  less-than/greater-than  symbols are used to */
/* delineate  the  VSE  symbolic  parameter  name  for  which this */
/* procedure is to perform variable name resolution.               */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  _lbr  = 'PRD2.CONFIG';     /* alter this to suit your needs */

  Parse Source _sys _env _pgm _tokens;

  False = (0=1);
  True  = (1=1);

  rc = 0;
  Arg _msg;

/* ----------------------------------------------------------------- */
/* Get SYSIPT data                                                   */
/* ----------------------------------------------------------------- */

  "EXECIO * DISKR SYSIPT ( OPEN FINIS STEM card. )";
  If rc <> 0 Then Do
    Say ' '_pgm': EXECIO from SYSIPT returned rc =' rc;
    Exit 16;
  End

/* ----------------------------------------------------------------- */
/* Validate PARM arguments                                           */
/* ----------------------------------------------------------------- */

  If _msg <> '?' Then Do
    del = '';
    Parse Value Space(Translate(_msg,' ',',')) With ,
      pch lib ext 1 'OUTPUT=' pch2 .,
                  1 'DELETE=' del2 .,
                  1 'SUBLIB=' lib2 .;
    If pch2 <> '' Then pch = pch2;
    If del2 <> '' Then del = del2;
    If lib2 <> '' Then lib = lib2;
    If Kword(pch) Then pch = '';       /* positional omitted? */
    If Kword(del) Then del = '';       /* positional omitted? */
    If Kword(lib) Then lib = '';       /* positional omitted? */

    If pch = '' & del = '' Then pch = 'SYSPCH';
    If pch <> 'SYSPCH' & lib = '' Then lib = _lbr;

    ext = RemoveKeyWord('OUTPUT', ext);
    ext = RemoveKeyWord('DELETE', ext);
    ext = RemoveKeyWord('SUBLIB', ext);

    If ext <> '',
    | (pch <> '' & del <> ''),
    | (del <> '' & del <> 'JOBINFO' & Pos('.',del) = 0),
    | (pch <> '' & pch <> 'SYSPCH' & pch <> 'JOBINFO' & Pos('.',pch)=0),
    | (lib <> '' & Pos('.',lib) = 0),
    Then Do
      Say 'MISSING, INVALID, OR EXTRANEOUS ARGUMENT(S) SPECIFIED.';
      _msg = '?';
    End;

    If _msg = '?' Then Do
      If del = '' Then
        Say "  OUTPUT="pch",SUBLIB="lib",EXTRA='"ext"'";
      Else Do
        Say "  OUTPUT="pch",DELETE="del",SUBLIB="lib",EXTRA='"ext"'";
      End
      rc = 12;
    End;

  End;

  If _msg == '?' Then Do
    Do n = 1 While Left(Sourceline(n),2) = '/*'
      Say Sourceline(n);
    End;
    Exit rc;
  End;

  If del = '' Then
    Say "  OUTPUT="pch",SUBLIB="lib",EXTRA='"ext"'";
  Else Do
    Say "  DELETE="del",SUBLIB="lib",EXTRA='"ext"'";
  End

/* ----------------------------------------------------------------- */
/* Pre-process SYSIPT data                                           */
/* ----------------------------------------------------------------- */

  syspch.  = '';
  syspch.0 = 0;

  Do n = 1 to card.0
    x = syspch.0 + 1;
    syspch.0 = x;
    syspch.x = ReplVars(Strip(card.n,'Trailing'));
    If Length(syspch.x) > 80 Then Do
      Say ' '_pgm': Resolved card' n 'too long =' Length(syspch.x);
      Exit 16;
    End
    If Length(syspch.x) = 0 Then Do
      syspch.x = '  ';
    End
    Drop card.n;
  End

/* ----------------------------------------------------------------- */
/* Output the pre-processed data                                     */
/* ----------------------------------------------------------------- */

  If del <> '' Then Do

    If del = 'JOBINFO' Then Do
      Call RXVSESYM 'Get','JOBINFO';
      If rc <> 0 Then Do
        Say ' '_pgm": RXVSESYM Get error: rc =" rc", result =" result;
        Exit 16;
      End
      del = JOBINFO;
      If Pos('.',del) = 0 Then Do
        Say ' '_pgm": Invalid symbol content = '"del"'";
        Exit 12;
      End;
    End
    rc = DeleteLibMember(del,lib);
    If rc = 0 & syspch.0 > 0 Then Do
      Say ' '_pgm': Extraneous SYSIPT ignored';
      rc = 4;
    End

  End
  Else Do

    If syspch.0 = 0 Then Do
      Say ' '_pgm': No SYSIPT found';
      rc = 8;
    End
    Else Do
      If pch <> 'SYSPCH' Then Do
        If pch = 'JOBINFO' Then Do
          y = SYSVAR('SYSPOWJNM');  SYSPOWJNM  = Strip(SYSPOWJNM);
          y = SYSVAR('SYSPOWJNUM'); SYSPOWJNUM = Strip(SYSPOWJNUM);
          JOBINFO = SYSPOWJNM'.'SYSPOWJNUM;
          Call RXVSESYM 'Set','JOBINFO';
          If rc <> 0 Then Do
            Say ' '_pgm": RXVSESYM Set error: rc =" rc", result =",
                                                                 result;
            Exit 16;
          End
          pch = JOBINFO;
        End
        rc = WriteLibMember(pch,lib);
      End
      Else Do
        "EXECIO * DISKW SYSPCH ( OPEN FINIS STEM syspch."
        If rc = 0 Then
          Say ' '_pgm':' syspch.0 'cards processed';
        Else Do
          Say ' '_pgm': EXECIO to SYSPCH returned rc =' rc;
          Exit 12;
        End
      End
    End

  End

/* ----------------------------------------------------------------- */
/* Terminate procedure                                               */
/* ----------------------------------------------------------------- */

Exit rc;

/* ----------------------------------------------------------------- */
/* Internal routines                                                 */
/* ----------------------------------------------------------------- */

DeleteLibMember: Procedure Expose _pgm;
  Arg _mbr,_lbr;
  sysipt.  = '';
  sysipt.0 = 2;
  sysipt.1 = ' ACCESS S='_lbr;
  sysipt.2 = ' DELETE '_mbr;
  y = REXXIPT('sysipt.');
  y = OUTTRAP('syslst.','*','NOCONCAT');
  Address LINK 'LIBR';
  If rc <> 0 Then Do
    Say ' '_pgm': VSE Librarian rc = 'rc;
    Say ' '_pgm': Library/member = '_lbr'/'_mbr;
    Say ' ';
    Do i = 1 to syslst.0
      Say ' 'syslst.i;
    End i
  End
Return rc;

Kword: Procedure Expose True False;
  Parse Arg v;
  If Pos('=',v) > 0 Then
    Return True;
Return False;

RemoveKeyWord: Procedure;
  Parse Arg needle,haystack;
  needle = Strip(needle)||'=';
  If needle <> '' Then Do
    Do w = Words(haystack) To 1 By -1
      If Left(Word(haystack,w),Length(needle)) == needle Then Do
        haystack = DelWord(haystack,w);
      End;
    End;
  End;
Return Strip(haystack);

WriteLibMember: Procedure Expose _pgm syspch.;
  Arg _mbr,_lbr;
  "EXECIO * DISKW" _lbr'.'_mbr "( OPEN FINIS NODATA STEM syspch. )";
  If rc <> 0 Then Do
    y = SYSVAR('SYSLIBRCODE');
    SYSLIBRCODE = Strip(SYSLIBRCODE);
    Say ' '_pgm': EXECIO DISKW rc =' rc '('SYSLIBRCODE')';
    Say ' '_pgm': Library/member = '_lbr'/'_mbr;
  End
Return rc;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
